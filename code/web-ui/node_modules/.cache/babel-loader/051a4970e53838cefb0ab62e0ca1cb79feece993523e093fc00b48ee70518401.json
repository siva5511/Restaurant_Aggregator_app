{"ast":null,"code":"// src/api.js\nconst API_BASE_URL = 'http://localhost:5000'; // Ensure this matches your Flask API URL\n\nexport const fetchRestaurants = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/restaurants`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    console.log(response.json());\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching restaurants:', error);\n    return []; // Return an empty array if there's an error\n  }\n};\nexport const fetchRestaurantById = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/restaurants/${id}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching restaurant details:', error);\n    return null; // Return null if there's an error\n  }\n};","map":{"version":3,"names":["API_BASE_URL","fetchRestaurants","response","fetch","ok","Error","console","log","json","error","fetchRestaurantById","id"],"sources":["C:/Users/nvsiv/OneDrive/Desktop/Assignment-TypeFace/code/web-ui/src/api.js"],"sourcesContent":["// src/api.js\r\nconst API_BASE_URL = 'http://localhost:5000'; // Ensure this matches your Flask API URL\r\n\r\nexport const fetchRestaurants = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/restaurants`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    console.log(response.json())\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching restaurants:', error);\r\n    return []; // Return an empty array if there's an error\r\n  }\r\n};\r\n\r\nexport const fetchRestaurantById = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/restaurants/${id}`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching restaurant details:', error);\r\n    return null; // Return null if there's an error\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,uBAAuB,CAAC,CAAC;;AAE9C,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,cAAc,CAAC;IAC3D,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACAC,OAAO,CAACC,GAAG,CAACL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC;IAC5B,OAAO,MAAMN,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,EAAE,CAAC,CAAC;EACb;AACF,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,EAAE,IAAK;EAC/C,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,gBAAgBW,EAAE,EAAE,CAAC;IACjE,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,OAAO,MAAMH,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,OAAO,IAAI,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}