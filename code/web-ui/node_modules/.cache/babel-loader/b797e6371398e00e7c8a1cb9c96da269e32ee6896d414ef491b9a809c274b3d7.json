{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5000';\nexport const fetchRestaurants = async (page = 1, limit = 15, country = '', avgCost = '', cuisines = '', search = '') => {\n  try {\n    const queryParams = new URLSearchParams({\n      page,\n      limit,\n      country,\n      avg_cost: avgCost,\n      cuisines,\n      search\n    }).toString();\n    const response = await fetch(`${API_BASE_URL}/restaurants?${queryParams}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching restaurants:', error);\n    return {\n      restaurants: [],\n      totalCount: 0,\n      page: 1,\n      totalPages: 1\n    };\n  }\n};\nexport const fetchRestaurantById = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/restaurants/${id}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching restaurant details:', error);\n    return null;\n  }\n};\n\n// Fetch country details by country code\nexport const fetchCountryByCode = async code => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/countries/${code}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching country details:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","fetchRestaurants","page","limit","country","avgCost","cuisines","search","queryParams","URLSearchParams","avg_cost","toString","response","fetch","ok","Error","json","error","console","restaurants","totalCount","totalPages","fetchRestaurantById","id","fetchCountryByCode","code"],"sources":["C:/Users/nvsiv/OneDrive/Desktop/Assignment-TypeFace/code/web-ui/src/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5000';\r\n\r\nexport const fetchRestaurants = async (page = 1, limit = 15, country = '', avgCost = '', cuisines = '', search = '') => {\r\n  try {\r\n    const queryParams = new URLSearchParams({\r\n      page,\r\n      limit,\r\n      country,\r\n      avg_cost: avgCost,\r\n      cuisines,\r\n      search\r\n    }).toString();\r\n\r\n    const response = await fetch(`${API_BASE_URL}/restaurants?${queryParams}`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching restaurants:', error);\r\n    return { restaurants: [], totalCount: 0, page: 1, totalPages: 1 }; \r\n  }\r\n};\r\n\r\nexport const fetchRestaurantById = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/restaurants/${id}`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching restaurant details:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n\r\n// Fetch country details by country code\r\nexport const fetchCountryByCode = async (code) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/countries/${code}`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching country details:', error);\r\n    return null;\r\n  }\r\n};"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB;AAE5C,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,EAAE,EAAEC,OAAO,GAAG,EAAE,EAAEC,OAAO,GAAG,EAAE,EAAEC,QAAQ,GAAG,EAAE,EAAEC,MAAM,GAAG,EAAE,KAAK;EACtH,IAAI;IACF,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC;MACtCP,IAAI;MACJC,KAAK;MACLC,OAAO;MACPM,QAAQ,EAAEL,OAAO;MACjBC,QAAQ;MACRC;IACF,CAAC,CAAC,CAACI,QAAQ,CAAC,CAAC;IAEb,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGb,YAAY,gBAAgBQ,WAAW,EAAE,CAAC;IAC1E,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IAEA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO;MAAEE,WAAW,EAAE,EAAE;MAAEC,UAAU,EAAE,CAAC;MAAElB,IAAI,EAAE,CAAC;MAAEmB,UAAU,EAAE;IAAE,CAAC;EACnE;AACF,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,EAAE,IAAK;EAC/C,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGb,YAAY,gBAAgBuB,EAAE,EAAE,CAAC;IACjE,IAAI,CAACX,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,OAAO,IAAI;EACb;AACF,CAAC;;AAGD;AACA,OAAO,MAAMO,kBAAkB,GAAG,MAAOC,IAAI,IAAK;EAChD,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGb,YAAY,cAAcyB,IAAI,EAAE,CAAC;IACjE,IAAI,CAACb,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}